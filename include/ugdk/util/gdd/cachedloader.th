
#ifndef UGDK_UTIL_GDD_CACHEDLOADER_TH_
#define UGDK_UTIL_GDD_CACHEDLOADER_TH_

#include <ugdk/util/gdd/simpleloader.h>
#include <ugdk/base/resourcecontainer.h>
#include <map>
#include <string>

namespace ugdk {

namespace gdd {

template <class T>
class CachedLoader : public SimpleLoader<T>, public virtual ugdk::base::ResourceContainer<T*> {

  public:

    CachedLoader(DescriptionProtocol<T> *protocol) : SimpleLoader<T>(protocol) {}

    ~CachedLoader();

    T* Load(const std::string& gddfile_path);

    /// ResourceContainer methods
    void Insert( const std::string& tag, T* val);
    void Replace(const std::string& tag, T* val);
    bool Exists( const std::string& tag) const;
    T*   Find(   const std::string& tag);
    T*   Load(   const std::string& filepath, const std::string& tag);

    void ClearCache();

  protected:

    typedef std::map<std::string, T*>   DataMap;
    typedef typename DataMap::iterator  DataIterator;

  private:

    T* loadFromCache(const std::string& gddfile_path);

    T* loadNewData(const std::string& gddfile_path);

    void addToCache(const std::string& gddfile_path, T*& new_data);

    DataMap cache_;

};

} /* namespace gdd */

} /* namespace ugdk */
#endif /* UGDK_UTIL_GDD_CACHEDLOADER_TH_ */
