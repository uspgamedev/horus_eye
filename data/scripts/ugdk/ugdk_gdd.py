# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ugdk_gdd', [dirname(__file__)])
        except ImportError:
            import _ugdk_gdd
            return _ugdk_gdd
        if fp is not None:
            try:
                _mod = imp.load_module('_ugdk_gdd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ugdk_gdd = swig_import_helper()
    del swig_import_helper
else:
    import _ugdk_gdd
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_gdd.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ugdk_gdd.SwigPyIterator_value(self)
    def incr(self, n=1): return _ugdk_gdd.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _ugdk_gdd.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ugdk_gdd.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ugdk_gdd.SwigPyIterator_equal(self, *args)
    def copy(self): return _ugdk_gdd.SwigPyIterator_copy(self)
    def next(self): return _ugdk_gdd.SwigPyIterator_next(self)
    def __next__(self): return _ugdk_gdd.SwigPyIterator___next__(self)
    def previous(self): return _ugdk_gdd.SwigPyIterator_previous(self)
    def advance(self, *args): return _ugdk_gdd.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ugdk_gdd.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ugdk_gdd.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ugdk_gdd.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ugdk_gdd.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ugdk_gdd.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ugdk_gdd.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ugdk_gdd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)
cvar = _ugdk_gdd.cvar
LuaLang = cvar.LuaLang
PythonLang = cvar.PythonLang

import ugdk_action
class Reader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Reader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ugdk_gdd.new_Reader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_gdd.delete_Reader
    __del__ = lambda self : None;
    def file_path(self): return _ugdk_gdd.Reader_file_path(self)
    def line(self): return _ugdk_gdd.Reader_line(self)
    def Begin(self): return _ugdk_gdd.Reader_Begin(self)
    def Next(self): return _ugdk_gdd.Reader_Next(self)
    def SkipComment(self): return _ugdk_gdd.Reader_SkipComment(self)
    def SkipSpace(self): return _ugdk_gdd.Reader_SkipSpace(self)
    def IsReserved(self, *args): return _ugdk_gdd.Reader_IsReserved(self, *args)
    def UntilNextTag(self): return _ugdk_gdd.Reader_UntilNextTag(self)
    def Name(self, *args): return _ugdk_gdd.Reader_Name(self, *args)
    def Value(self, *args): return _ugdk_gdd.Reader_Value(self, *args)
    def ValueSequence(self, *args): return _ugdk_gdd.Reader_ValueSequence(self, *args)
Reader_swigregister = _ugdk_gdd.Reader_swigregister
Reader_swigregister(Reader)

class LoadError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadError, name)
    __repr__ = _swig_repr
    TYPE_MISMATCH = _ugdk_gdd.LoadError_TYPE_MISMATCH
    INVALID_VALUE = _ugdk_gdd.LoadError_INVALID_VALUE
    def __init__(self): 
        this = _ugdk_gdd.new_LoadError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_gdd.delete_LoadError
    __del__ = lambda self : None;
LoadError_swigregister = _ugdk_gdd.LoadError_swigregister
LoadError_swigregister(LoadError)

class ParseStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParseStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParseStatus, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OK = _ugdk_gdd.ParseStatus_OK
    FILE_NOT_FOUND = _ugdk_gdd.ParseStatus_FILE_NOT_FOUND
    LOAD_ERROR = _ugdk_gdd.ParseStatus_LOAD_ERROR
    SYNTAX_ERROR = _ugdk_gdd.ParseStatus_SYNTAX_ERROR
    __swig_destroy__ = _ugdk_gdd.delete_ParseStatus
    __del__ = lambda self : None;
ParseStatus_swigregister = _ugdk_gdd.ParseStatus_swigregister
ParseStatus_swigregister(ParseStatus)

class AnimationAbstractLoader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationAbstractLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationAbstractLoader, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_gdd.delete_AnimationAbstractLoader
    __del__ = lambda self : None;
    def Load(self, *args): return _ugdk_gdd.AnimationAbstractLoader_Load(self, *args)
    def newData(self, *args): return _ugdk_gdd.AnimationAbstractLoader_newData(self, *args)
    def data(self): return _ugdk_gdd.AnimationAbstractLoader_data(self)
    def cleanData(self): return _ugdk_gdd.AnimationAbstractLoader_cleanData(self)
AnimationAbstractLoader_swigregister = _ugdk_gdd.AnimationAbstractLoader_swigregister
AnimationAbstractLoader_swigregister(AnimationAbstractLoader)

class AnimationSimpleLoader(AnimationAbstractLoader):
    __swig_setmethods__ = {}
    for _s in [AnimationAbstractLoader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationSimpleLoader, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimationAbstractLoader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationSimpleLoader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ugdk_gdd.new_AnimationSimpleLoader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_gdd.delete_AnimationSimpleLoader
    __del__ = lambda self : None;
    def Load(self, *args): return _ugdk_gdd.AnimationSimpleLoader_Load(self, *args)
    def newData(self, *args): return _ugdk_gdd.AnimationSimpleLoader_newData(self, *args)
    def data(self): return _ugdk_gdd.AnimationSimpleLoader_data(self)
    def cleanData(self): return _ugdk_gdd.AnimationSimpleLoader_cleanData(self)
AnimationSimpleLoader_swigregister = _ugdk_gdd.AnimationSimpleLoader_swigregister
AnimationSimpleLoader_swigregister(AnimationSimpleLoader)

class AnimationLoader(AnimationSimpleLoader):
    __swig_setmethods__ = {}
    for _s in [AnimationSimpleLoader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationLoader, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimationSimpleLoader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationLoader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ugdk_gdd.new_AnimationLoader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_gdd.delete_AnimationLoader
    __del__ = lambda self : None;
    def Insert(self, *args): return _ugdk_gdd.AnimationLoader_Insert(self, *args)
    def Replace(self, *args): return _ugdk_gdd.AnimationLoader_Replace(self, *args)
    def Exists(self, *args): return _ugdk_gdd.AnimationLoader_Exists(self, *args)
    def Find(self, *args): return _ugdk_gdd.AnimationLoader_Find(self, *args)
    def Load(self, *args): return _ugdk_gdd.AnimationLoader_Load(self, *args)
    def ClearCache(self): return _ugdk_gdd.AnimationLoader_ClearCache(self)
AnimationLoader_swigregister = _ugdk_gdd.AnimationLoader_swigregister
AnimationLoader_swigregister(AnimationLoader)


def RegisterType_Reader(*args):
  return _ugdk_gdd.RegisterType_Reader(*args)
RegisterType_Reader = _ugdk_gdd.RegisterType_Reader

def GetNull_Reader():
  return _ugdk_gdd.GetNull_Reader()
GetNull_Reader = _ugdk_gdd.GetNull_Reader

def RegisterType_LoadError(*args):
  return _ugdk_gdd.RegisterType_LoadError(*args)
RegisterType_LoadError = _ugdk_gdd.RegisterType_LoadError

def GetNull_LoadError():
  return _ugdk_gdd.GetNull_LoadError()
GetNull_LoadError = _ugdk_gdd.GetNull_LoadError
print "Python ugdk_gdd confirm exports!"
module = __import__(__name__)
for key,value in module.__dict__.items():
	if key.startswith("RegisterType_"):
		arg = module.__dict__["GetNull_"+key[13:] ]()
		value(arg)

# This file is compatible with both classic and new-style classes.


