# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ugdk_action', [dirname(__file__)])
        except ImportError:
            import _ugdk_action
            return _ugdk_action
        if fp is not None:
            try:
                _mod = imp.load_module('_ugdk_action', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ugdk_action = swig_import_helper()
    del swig_import_helper
else:
    import _ugdk_action
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_action.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ugdk_action.SwigPyIterator_value(self)
    def incr(self, n = 1): return _ugdk_action.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _ugdk_action.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ugdk_action.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ugdk_action.SwigPyIterator_equal(self, *args)
    def copy(self): return _ugdk_action.SwigPyIterator_copy(self)
    def next(self): return _ugdk_action.SwigPyIterator_next(self)
    def __next__(self): return _ugdk_action.SwigPyIterator___next__(self)
    def previous(self): return _ugdk_action.SwigPyIterator_previous(self)
    def advance(self, *args): return _ugdk_action.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ugdk_action.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ugdk_action.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ugdk_action.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ugdk_action.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ugdk_action.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ugdk_action.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ugdk_action.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)
cvar = _ugdk_action.cvar
LuaLang = cvar.LuaLang
PythonLang = cvar.PythonLang

class AnimationFrameVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationFrameVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationFrameVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ugdk_action.AnimationFrameVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ugdk_action.AnimationFrameVector___nonzero__(self)
    def __bool__(self): return _ugdk_action.AnimationFrameVector___bool__(self)
    def __len__(self): return _ugdk_action.AnimationFrameVector___len__(self)
    def pop(self): return _ugdk_action.AnimationFrameVector_pop(self)
    def __getslice__(self, *args): return _ugdk_action.AnimationFrameVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ugdk_action.AnimationFrameVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ugdk_action.AnimationFrameVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ugdk_action.AnimationFrameVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ugdk_action.AnimationFrameVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ugdk_action.AnimationFrameVector___setitem__(self, *args)
    def append(self, *args): return _ugdk_action.AnimationFrameVector_append(self, *args)
    def empty(self): return _ugdk_action.AnimationFrameVector_empty(self)
    def size(self): return _ugdk_action.AnimationFrameVector_size(self)
    def clear(self): return _ugdk_action.AnimationFrameVector_clear(self)
    def swap(self, *args): return _ugdk_action.AnimationFrameVector_swap(self, *args)
    def get_allocator(self): return _ugdk_action.AnimationFrameVector_get_allocator(self)
    def begin(self): return _ugdk_action.AnimationFrameVector_begin(self)
    def end(self): return _ugdk_action.AnimationFrameVector_end(self)
    def rbegin(self): return _ugdk_action.AnimationFrameVector_rbegin(self)
    def rend(self): return _ugdk_action.AnimationFrameVector_rend(self)
    def pop_back(self): return _ugdk_action.AnimationFrameVector_pop_back(self)
    def erase(self, *args): return _ugdk_action.AnimationFrameVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ugdk_action.new_AnimationFrameVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ugdk_action.AnimationFrameVector_push_back(self, *args)
    def front(self): return _ugdk_action.AnimationFrameVector_front(self)
    def back(self): return _ugdk_action.AnimationFrameVector_back(self)
    def assign(self, *args): return _ugdk_action.AnimationFrameVector_assign(self, *args)
    def resize(self, *args): return _ugdk_action.AnimationFrameVector_resize(self, *args)
    def insert(self, *args): return _ugdk_action.AnimationFrameVector_insert(self, *args)
    def reserve(self, *args): return _ugdk_action.AnimationFrameVector_reserve(self, *args)
    def capacity(self): return _ugdk_action.AnimationFrameVector_capacity(self)
    __swig_destroy__ = _ugdk_action.delete_AnimationFrameVector
    __del__ = lambda self : None;
AnimationFrameVector_swigregister = _ugdk_action.AnimationFrameVector_swigregister
AnimationFrameVector_swigregister(AnimationFrameVector)

import ugdk_base
import ugdk_graphic
import ugdk_audio
import ugdk_action
DEFAULT_PERIOD = _ugdk_action.DEFAULT_PERIOD
class AnimationFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationFrame, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ugdk_action.new_AnimationFrame(*args)
        try: self.this.append(this)
        except: self.this = this
    def frame(self): return _ugdk_action.AnimationFrame_frame(self)
    def modifier(self): return _ugdk_action.AnimationFrame_modifier(self)
    def set_frame(self, *args): return _ugdk_action.AnimationFrame_set_frame(self, *args)
    __swig_destroy__ = _ugdk_action.delete_AnimationFrame
    __del__ = lambda self : None;
AnimationFrame_swigregister = _ugdk_action.AnimationFrame_swigregister
AnimationFrame_swigregister(AnimationFrame)

class Animation(AnimationFrameVector):
    __swig_setmethods__ = {}
    for _s in [AnimationFrameVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Animation, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimationFrameVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Animation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ugdk_action.new_Animation()
        try: self.this.append(this)
        except: self.this = this
    def fps(self): return _ugdk_action.Animation_fps(self)
    def period(self): return _ugdk_action.Animation_period(self)
    def set_fps(self, *args): return _ugdk_action.Animation_set_fps(self, *args)
    def set_period(self, *args): return _ugdk_action.Animation_set_period(self, *args)
    __swig_destroy__ = _ugdk_action.delete_Animation
    __del__ = lambda self : None;
Animation_swigregister = _ugdk_action.Animation_swigregister
Animation_swigregister(Animation)

class AnimationManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ugdk_action.new_AnimationManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_action.delete_AnimationManager
    __del__ = lambda self : None;
    def set_slowdown_factor(self, *args): return _ugdk_action.AnimationManager_set_slowdown_factor(self, *args)
    def set_speedup_factor(self, *args): return _ugdk_action.AnimationManager_set_speedup_factor(self, *args)
    def fps(self): return _ugdk_action.AnimationManager_fps(self)
    def period(self): return _ugdk_action.AnimationManager_period(self)
    def n_frames(self): return _ugdk_action.AnimationManager_n_frames(self)
    def GetFrame(self): return _ugdk_action.AnimationManager_GetFrame(self)
    def set_default_frame(self, *args): return _ugdk_action.AnimationManager_set_default_frame(self, *args)
    def get_current_modifier(self): return _ugdk_action.AnimationManager_get_current_modifier(self)
    def Select(self, *args): return _ugdk_action.AnimationManager_Select(self, *args)
    def Update(self, *args): return _ugdk_action.AnimationManager_Update(self, *args)
    def AddObserver(self, *args): return _ugdk_action.AnimationManager_AddObserver(self, *args)
AnimationManager_swigregister = _ugdk_action.AnimationManager_swigregister
AnimationManager_swigregister(AnimationManager)

class AnimationSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationSet, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ugdk_action.new_AnimationSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_action.delete_AnimationSet
    __del__ = lambda self : None;
    def Release(self): return _ugdk_action.AnimationSet_Release(self)
    def Get(self, *args): return _ugdk_action.AnimationSet_Get(self, *args)
    def Add(self, *args): return _ugdk_action.AnimationSet_Add(self, *args)
    def Search(self, *args): return _ugdk_action.AnimationSet_Search(self, *args)
    def MakeIndex(self, *args): return _ugdk_action.AnimationSet_MakeIndex(self, *args)
    def Print(self, *args): return _ugdk_action.AnimationSet_Print(self, *args)
AnimationSet_swigregister = _ugdk_action.AnimationSet_swigregister
AnimationSet_swigregister(AnimationSet)

class Task(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Task, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_action.delete_Task
    __del__ = lambda self : None;
    def __call__(self, *args): return _ugdk_action.Task___call__(self, *args)
    def priority(self): return _ugdk_action.Task_priority(self)
    def finished(self): return _ugdk_action.Task_finished(self)
Task_swigregister = _ugdk_action.Task_swigregister
Task_swigregister(Task)

class Entity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Entity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Entity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_action.delete_Entity
    __del__ = lambda self : None;
    def to_be_removed(self): return _ugdk_action.Entity_to_be_removed(self)
    def Update(self, *args): return _ugdk_action.Entity_Update(self, *args)
Entity_swigregister = _ugdk_action.Entity_swigregister
Entity_swigregister(Entity)

class Observer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Observer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Tick(self): return _ugdk_action.Observer_Tick(self)
    __swig_destroy__ = _ugdk_action.delete_Observer
    __del__ = lambda self : None;
Observer_swigregister = _ugdk_action.Observer_swigregister
Observer_swigregister(Observer)

class Scene(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scene, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_action.delete_Scene
    __del__ = lambda self : None;
    def Focus(self): return _ugdk_action.Scene_Focus(self)
    def DeFocus(self): return _ugdk_action.Scene_DeFocus(self)
    def AddEntity(self, *args): return _ugdk_action.Scene_AddEntity(self, *args)
    def RemoveEntity(self, *args): return _ugdk_action.Scene_RemoveEntity(self, *args)
    def QueuedAddEntity(self, *args): return _ugdk_action.Scene_QueuedAddEntity(self, *args)
    def RemoveAllEntities(self): return _ugdk_action.Scene_RemoveAllEntities(self)
    def AddTask(self, *args): return _ugdk_action.Scene_AddTask(self, *args)
    def Finish(self): return _ugdk_action.Scene_Finish(self)
    def Update(self, *args): return _ugdk_action.Scene_Update(self, *args)
    def StopsPreviousMusic(self, *args): return _ugdk_action.Scene_StopsPreviousMusic(self, *args)
    def finished(self): return _ugdk_action.Scene_finished(self)
    def content_node(self): return _ugdk_action.Scene_content_node(self)
    def interface_node(self): return _ugdk_action.Scene_interface_node(self)
    def background_music(self): return _ugdk_action.Scene_background_music(self)
    def set_background_music(self, *args): return _ugdk_action.Scene_set_background_music(self, *args)
Scene_swigregister = _ugdk_action.Scene_swigregister
Scene_swigregister(Scene)


def RegisterType_Animation(*args):
  return _ugdk_action.RegisterType_Animation(*args)
RegisterType_Animation = _ugdk_action.RegisterType_Animation

def GetNull_Animation():
  return _ugdk_action.GetNull_Animation()
GetNull_Animation = _ugdk_action.GetNull_Animation

def RegisterType_AnimationFrame(*args):
  return _ugdk_action.RegisterType_AnimationFrame(*args)
RegisterType_AnimationFrame = _ugdk_action.RegisterType_AnimationFrame

def GetNull_AnimationFrame():
  return _ugdk_action.GetNull_AnimationFrame()
GetNull_AnimationFrame = _ugdk_action.GetNull_AnimationFrame

def RegisterType_AnimationSet(*args):
  return _ugdk_action.RegisterType_AnimationSet(*args)
RegisterType_AnimationSet = _ugdk_action.RegisterType_AnimationSet

def GetNull_AnimationSet():
  return _ugdk_action.GetNull_AnimationSet()
GetNull_AnimationSet = _ugdk_action.GetNull_AnimationSet

def RegisterType_AnimationManager(*args):
  return _ugdk_action.RegisterType_AnimationManager(*args)
RegisterType_AnimationManager = _ugdk_action.RegisterType_AnimationManager

def GetNull_AnimationManager():
  return _ugdk_action.GetNull_AnimationManager()
GetNull_AnimationManager = _ugdk_action.GetNull_AnimationManager

def RegisterType_Entity(*args):
  return _ugdk_action.RegisterType_Entity(*args)
RegisterType_Entity = _ugdk_action.RegisterType_Entity

def GetNull_Entity():
  return _ugdk_action.GetNull_Entity()
GetNull_Entity = _ugdk_action.GetNull_Entity

def RegisterType_Observer(*args):
  return _ugdk_action.RegisterType_Observer(*args)
RegisterType_Observer = _ugdk_action.RegisterType_Observer

def GetNull_Observer():
  return _ugdk_action.GetNull_Observer()
GetNull_Observer = _ugdk_action.GetNull_Observer

def RegisterType_Scene(*args):
  return _ugdk_action.RegisterType_Scene(*args)
RegisterType_Scene = _ugdk_action.RegisterType_Scene

def GetNull_Scene():
  return _ugdk_action.GetNull_Scene()
GetNull_Scene = _ugdk_action.GetNull_Scene

def RegisterType_Task(*args):
  return _ugdk_action.RegisterType_Task(*args)
RegisterType_Task = _ugdk_action.RegisterType_Task

def GetNull_Task():
  return _ugdk_action.GetNull_Task()
GetNull_Task = _ugdk_action.GetNull_Task
print "Python ugdk_action confirm exports!"
module = __import__(__name__)
for key,value in module.__dict__.items():
	if key.startswith("RegisterType_"):
		arg = module.__dict__["GetNull_"+key[13:] ]()
		value(arg)

# This file is compatible with both classic and new-style classes.


