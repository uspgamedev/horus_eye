# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ugdk_drawable', [dirname(__file__)])
        except ImportError:
            import _ugdk_drawable
            return _ugdk_drawable
        if fp is not None:
            try:
                _mod = imp.load_module('_ugdk_drawable', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ugdk_drawable = swig_import_helper()
    del swig_import_helper
else:
    import _ugdk_drawable
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_drawable.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ugdk_drawable.SwigPyIterator_value(self)
    def incr(self, n = 1): return _ugdk_drawable.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _ugdk_drawable.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ugdk_drawable.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ugdk_drawable.SwigPyIterator_equal(self, *args)
    def copy(self): return _ugdk_drawable.SwigPyIterator_copy(self)
    def next(self): return _ugdk_drawable.SwigPyIterator_next(self)
    def __next__(self): return _ugdk_drawable.SwigPyIterator___next__(self)
    def previous(self): return _ugdk_drawable.SwigPyIterator_previous(self)
    def advance(self, *args): return _ugdk_drawable.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ugdk_drawable.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ugdk_drawable.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ugdk_drawable.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ugdk_drawable.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ugdk_drawable.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ugdk_drawable.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ugdk_drawable.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)
cvar = _ugdk_drawable.cvar
LuaLang = cvar.LuaLang
PythonLang = cvar.PythonLang

import ugdk_math
import ugdk_base
import ugdk_action
import ugdk_graphic
class Shape(ugdk_graphic.Drawable):
    __swig_setmethods__ = {}
    for _s in [ugdk_graphic.Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape, name, value)
    __swig_getmethods__ = {}
    for _s in [ugdk_graphic.Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Shape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_drawable.delete_Shape
    __del__ = lambda self : None;
Shape_swigregister = _ugdk_drawable.Shape_swigregister
Shape_swigregister(Shape)

class SolidRectangle(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolidRectangle, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SolidRectangle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ugdk_drawable.new_SolidRectangle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_drawable.delete_SolidRectangle
    __del__ = lambda self : None;
    def Draw(self, *args): return _ugdk_drawable.SolidRectangle_Draw(self, *args)
    def size(self): return _ugdk_drawable.SolidRectangle_size(self)
    def set_size(self, *args): return _ugdk_drawable.SolidRectangle_set_size(self, *args)
    def color(self): return _ugdk_drawable.SolidRectangle_color(self)
    def set_color(self, *args): return _ugdk_drawable.SolidRectangle_set_color(self, *args)
SolidRectangle_swigregister = _ugdk_drawable.SolidRectangle_swigregister
SolidRectangle_swigregister(SolidRectangle)

class Sprite(ugdk_graphic.Drawable):
    __swig_setmethods__ = {}
    for _s in [ugdk_graphic.Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sprite, name, value)
    __swig_getmethods__ = {}
    for _s in [ugdk_graphic.Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sprite, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ugdk_drawable.new_Sprite(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_drawable.delete_Sprite
    __del__ = lambda self : None;
    def Draw(self, *args): return _ugdk_drawable.Sprite_Draw(self, *args)
    def size(self): return _ugdk_drawable.Sprite_size(self)
    def SelectAnimation(self, *args): return _ugdk_drawable.Sprite_SelectAnimation(self, *args)
    def SetAnimationSpeedupFactor(self, *args): return _ugdk_drawable.Sprite_SetAnimationSpeedupFactor(self, *args)
    def SetAnimationSlowdownFactor(self, *args): return _ugdk_drawable.Sprite_SetAnimationSlowdownFactor(self, *args)
    def GetAnimationFPS(self): return _ugdk_drawable.Sprite_GetAnimationFPS(self)
    def AddObserverToAnimation(self, *args): return _ugdk_drawable.Sprite_AddObserverToAnimation(self, *args)
    def AddTickFunctionToAnimation(self, *args): return _ugdk_drawable.Sprite_AddTickFunctionToAnimation(self, *args)
    def GetAnimationFrameNumber(self): return _ugdk_drawable.Sprite_GetAnimationFrameNumber(self)
    def SetDefaultFrame(self, *args): return _ugdk_drawable.Sprite_SetDefaultFrame(self, *args)
Sprite_swigregister = _ugdk_drawable.Sprite_swigregister
Sprite_swigregister(Sprite)

class Text(ugdk_graphic.Drawable):
    __swig_setmethods__ = {}
    for _s in [ugdk_graphic.Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    for _s in [ugdk_graphic.Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ugdk_drawable.new_Text(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_drawable.delete_Text
    __del__ = lambda self : None;
    def SetMessage(self, *args): return _ugdk_drawable.Text_SetMessage(self, *args)
    def Draw(self, *args): return _ugdk_drawable.Text_Draw(self, *args)
    def size(self): return _ugdk_drawable.Text_size(self)
Text_swigregister = _ugdk_drawable.Text_swigregister
Text_swigregister(Text)

class TexturedRectangle(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexturedRectangle, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexturedRectangle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ugdk_drawable.new_TexturedRectangle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_drawable.delete_TexturedRectangle
    __del__ = lambda self : None;
    def Draw(self, *args): return _ugdk_drawable.TexturedRectangle_Draw(self, *args)
    def size(self): return _ugdk_drawable.TexturedRectangle_size(self)
    def set_size(self, *args): return _ugdk_drawable.TexturedRectangle_set_size(self, *args)
TexturedRectangle_swigregister = _ugdk_drawable.TexturedRectangle_swigregister
TexturedRectangle_swigregister(TexturedRectangle)


def RegisterType_Shape(*args):
  return _ugdk_drawable.RegisterType_Shape(*args)
RegisterType_Shape = _ugdk_drawable.RegisterType_Shape

def GetNull_Shape():
  return _ugdk_drawable.GetNull_Shape()
GetNull_Shape = _ugdk_drawable.GetNull_Shape

def RegisterType_Text(*args):
  return _ugdk_drawable.RegisterType_Text(*args)
RegisterType_Text = _ugdk_drawable.RegisterType_Text

def GetNull_Text():
  return _ugdk_drawable.GetNull_Text()
GetNull_Text = _ugdk_drawable.GetNull_Text

def RegisterType_Sprite(*args):
  return _ugdk_drawable.RegisterType_Sprite(*args)
RegisterType_Sprite = _ugdk_drawable.RegisterType_Sprite

def GetNull_Sprite():
  return _ugdk_drawable.GetNull_Sprite()
GetNull_Sprite = _ugdk_drawable.GetNull_Sprite

def RegisterType_TexturedRectangle(*args):
  return _ugdk_drawable.RegisterType_TexturedRectangle(*args)
RegisterType_TexturedRectangle = _ugdk_drawable.RegisterType_TexturedRectangle

def GetNull_TexturedRectangle():
  return _ugdk_drawable.GetNull_TexturedRectangle()
GetNull_TexturedRectangle = _ugdk_drawable.GetNull_TexturedRectangle

def RegisterType_SolidRectangle(*args):
  return _ugdk_drawable.RegisterType_SolidRectangle(*args)
RegisterType_SolidRectangle = _ugdk_drawable.RegisterType_SolidRectangle

def GetNull_SolidRectangle():
  return _ugdk_drawable.GetNull_SolidRectangle()
GetNull_SolidRectangle = _ugdk_drawable.GetNull_SolidRectangle
print "Python ugdk_drawable confirm exports!"
module = __import__(__name__)
for key,value in module.__dict__.items():
	if key.startswith("RegisterType_"):
		arg = module.__dict__["GetNull_"+key[13:] ]()
		value(arg)

# This file is compatible with both classic and new-style classes.


