#include "engine.h"
#include "fogmanager.h"
#include "videomanager.h"
#include "image.h"
#include "texture.h"

namespace framework {

using namespace std;

// Creates a single texture with the fog ellipse and stores the
// values that generated it. All Images generated by CreateLightSource
// uses this single texture, scaling it in real-time.
FogManager::FogManager() {
    fog_texture_ = new Texture;
    stored_size_ = Vector2D(40.0f, 40.0f);
    fog_texture_->CreateFogTransparency(VIDEO_MANAGER()->video_size(), stored_size_);
}

FogManager::~FogManager() {
    map<pair<int,int>,Image*>::iterator it = fog_list_.begin();
    if(it != fog_list_.end()) {
        delete it->second;
        fog_list_.erase(it);
    }
    fog_list_.clear();
    delete fog_texture_;
}

// Returns an Image with a fog ellipse matching ellipse_coef
// This function stores the results: calling it again with the same
// arguments will return the same Image object. These objects should
// not be deleted.
Image* FogManager::GetLightSource(const Vector2D& ellipse_coef) {
    pair<int,int> coef(static_cast<int>(ellipse_coef.x),
                       static_cast<int>(ellipse_coef.y));
    if(fog_list_.count(coef) > 0)
        return fog_list_[coef];
    return fog_list_[coef] = CreateLightSource(ellipse_coef);
}

// Creates a new Image using the fog Texture and sets it's frame_size so
// the fog ellipse matches ellipse_coef.
Image* FogManager::CreateLightSource(const Vector2D& ellipse_coef) {
    Image* img = new Image(fog_texture_, false);
    Vector2D size = VIDEO_MANAGER()->video_size();
    size.x *= ellipse_coef.x / stored_size_.x;
    size.y *= ellipse_coef.y / stored_size_.y;
    img->set_render_size(size);
    return img;
}

}
