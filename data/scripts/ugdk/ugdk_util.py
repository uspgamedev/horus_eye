# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ugdk_util', [dirname(__file__)])
        except ImportError:
            import _ugdk_util
            return _ugdk_util
        if fp is not None:
            try:
                _mod = imp.load_module('_ugdk_util', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ugdk_util = swig_import_helper()
    del swig_import_helper
else:
    import _ugdk_util
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class VirtualType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualType, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ugdk_util.new_VirtualType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_util.delete_VirtualType
    __del__ = lambda self : None;
    def FromLang(self, *args): return _ugdk_util.VirtualType_FromLang(self, *args)
    def RegisterFromLang(self, *args): return _ugdk_util.VirtualType_RegisterFromLang(self, *args)
VirtualType_swigregister = _ugdk_util.VirtualType_swigregister
VirtualType_swigregister(VirtualType)
cvar = _ugdk_util.cvar
LuaLang = cvar.LuaLang
PythonLang = cvar.PythonLang

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_util.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ugdk_util.SwigPyIterator_value(self)
    def incr(self, n = 1): return _ugdk_util.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _ugdk_util.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ugdk_util.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ugdk_util.SwigPyIterator_equal(self, *args)
    def copy(self): return _ugdk_util.SwigPyIterator_copy(self)
    def next(self): return _ugdk_util.SwigPyIterator_next(self)
    def __next__(self): return _ugdk_util.SwigPyIterator___next__(self)
    def previous(self): return _ugdk_util.SwigPyIterator_previous(self)
    def advance(self, *args): return _ugdk_util.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ugdk_util.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ugdk_util.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ugdk_util.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ugdk_util.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ugdk_util.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ugdk_util.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ugdk_util.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import ugdk_action
import ugdk_audio
import ugdk_gdd
class DescriptionProtocol_AnimationSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DescriptionProtocol_AnimationSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DescriptionProtocol_AnimationSet, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_util.delete_DescriptionProtocol_AnimationSet
    __del__ = lambda self : None;
    def set_loader(self, *args): return _ugdk_util.DescriptionProtocol_AnimationSet_set_loader(self, *args)
    def loader(self): return _ugdk_util.DescriptionProtocol_AnimationSet_loader(self)
    def NewDescription(self): return _ugdk_util.DescriptionProtocol_AnimationSet_NewDescription(self)
    def NewData(self, *args): return _ugdk_util.DescriptionProtocol_AnimationSet_NewData(self, *args)
    def NewProperty(self, *args): return _ugdk_util.DescriptionProtocol_AnimationSet_NewProperty(self, *args)
    def NewRing(self, *args): return _ugdk_util.DescriptionProtocol_AnimationSet_NewRing(self, *args)
    def NewEntry(self, *args): return _ugdk_util.DescriptionProtocol_AnimationSet_NewEntry(self, *args)
    def NewSimpleChain(self, *args): return _ugdk_util.DescriptionProtocol_AnimationSet_NewSimpleChain(self, *args)
DescriptionProtocol_AnimationSet_swigregister = _ugdk_util.DescriptionProtocol_AnimationSet_swigregister
DescriptionProtocol_AnimationSet_swigregister(DescriptionProtocol_AnimationSet)

class AnimationParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationParser, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ugdk_util.delete_AnimationParser
    __del__ = lambda self : None;
    __swig_getmethods__["reference"] = lambda x: _ugdk_util.AnimationParser_reference
    if _newclass:reference = staticmethod(_ugdk_util.AnimationParser_reference)
    def Load(self, *args): return _ugdk_util.AnimationParser_Load(self, *args)
AnimationParser_swigregister = _ugdk_util.AnimationParser_swigregister
AnimationParser_swigregister(AnimationParser)

def AnimationParser_reference():
  return _ugdk_util.AnimationParser_reference()
AnimationParser_reference = _ugdk_util.AnimationParser_reference

class AnimationProtocol(DescriptionProtocol_AnimationSet):
    __swig_setmethods__ = {}
    for _s in [DescriptionProtocol_AnimationSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [DescriptionProtocol_AnimationSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationProtocol, name)
    __repr__ = _swig_repr
    ANIMATION_DATA = _ugdk_util.AnimationProtocol_ANIMATION_DATA
    FRAME_RING = _ugdk_util.AnimationProtocol_FRAME_RING
    EFFECT_RING = _ugdk_util.AnimationProtocol_EFFECT_RING
    def __init__(self): 
        this = _ugdk_util.new_AnimationProtocol()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_util.delete_AnimationProtocol
    __del__ = lambda self : None;
    def NewDescription(self): return _ugdk_util.AnimationProtocol_NewDescription(self)
    def NewData(self, *args): return _ugdk_util.AnimationProtocol_NewData(self, *args)
    def NewProperty(self, *args): return _ugdk_util.AnimationProtocol_NewProperty(self, *args)
    def NewRing(self, *args): return _ugdk_util.AnimationProtocol_NewRing(self, *args)
    def NewEntry(self, *args): return _ugdk_util.AnimationProtocol_NewEntry(self, *args)
    def NewSimpleChain(self, *args): return _ugdk_util.AnimationProtocol_NewSimpleChain(self, *args)
AnimationProtocol_swigregister = _ugdk_util.AnimationProtocol_swigregister
AnimationProtocol_swigregister(AnimationProtocol)

class PathManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ugdk_util.new_PathManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ugdk_util.delete_PathManager
    __del__ = lambda self : None;
    def ResolvePath(self, *args): return _ugdk_util.PathManager_ResolvePath(self, *args)
PathManager_swigregister = _ugdk_util.PathManager_swigregister
PathManager_swigregister(PathManager)

class Uncopyable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uncopyable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Uncopyable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
Uncopyable_swigregister = _ugdk_util.Uncopyable_swigregister
Uncopyable_swigregister(Uncopyable)


def RegisterType_AnimationParser(*args):
  return _ugdk_util.RegisterType_AnimationParser(*args)
RegisterType_AnimationParser = _ugdk_util.RegisterType_AnimationParser

def GetNull_AnimationParser():
  return _ugdk_util.GetNull_AnimationParser()
GetNull_AnimationParser = _ugdk_util.GetNull_AnimationParser

def RegisterType_PathManager(*args):
  return _ugdk_util.RegisterType_PathManager(*args)
RegisterType_PathManager = _ugdk_util.RegisterType_PathManager

def GetNull_PathManager():
  return _ugdk_util.GetNull_PathManager()
GetNull_PathManager = _ugdk_util.GetNull_PathManager

def RegisterType_AnimationProtocol(*args):
  return _ugdk_util.RegisterType_AnimationProtocol(*args)
RegisterType_AnimationProtocol = _ugdk_util.RegisterType_AnimationProtocol

def GetNull_AnimationProtocol():
  return _ugdk_util.GetNull_AnimationProtocol()
GetNull_AnimationProtocol = _ugdk_util.GetNull_AnimationProtocol

def RegisterType_Uncopyable(*args):
  return _ugdk_util.RegisterType_Uncopyable(*args)
RegisterType_Uncopyable = _ugdk_util.RegisterType_Uncopyable

def GetNull_Uncopyable():
  return _ugdk_util.GetNull_Uncopyable()
GetNull_Uncopyable = _ugdk_util.GetNull_Uncopyable
print "Python ugdk_util confirm exports!"
module = __import__(__name__)
for key,value in module.__dict__.items():
	if key.startswith("RegisterType_"):
		arg = module.__dict__["GetNull_"+key[13:] ]()
		value(arg)

# This file is compatible with both classic and new-style classes.


